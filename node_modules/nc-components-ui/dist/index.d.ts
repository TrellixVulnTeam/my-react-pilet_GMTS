import * as PropTypes from "prop-types";
//eslint-disable
import * as React from "react";
import { AgGridReact } from "ag-grid-react";
declare const NCButton: (props: any) => JSX.Element;
// This Component is the same implementation of NCButton but without using the material UI library
declare const NCButtonWithoutMUI: (props: any) => JSX.Element;
declare const NCText: {
    (props: any): JSX.Element;
    propTypes: {
        children: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<any>;
        variant: PropTypes.Requireable<string>;
        weight: PropTypes.Requireable<string>;
        align: PropTypes.Requireable<string>;
        type: PropTypes.Requireable<string>;
        styles: PropTypes.Requireable<object>;
        isBlock: PropTypes.Requireable<boolean>;
        disableTextSelection: PropTypes.Requireable<boolean>;
        tailwindClasses: PropTypes.Requireable<string>;
    };
    defaultProps: {
        variant: string;
        align: string;
        color: string;
        isBlock: boolean;
        disableTextSelection: boolean;
        tailwindClasses: string;
    };
};
/**
 * Primary UI component for user interaction
 */
declare const NCChip: {
    (props: any): JSX.Element;
    propTypes: {
        isDisabled: PropTypes.Requireable<boolean>;
        backgroundColor: PropTypes.Requireable<string>;
        size: PropTypes.Requireable<string>;
        label: PropTypes.Validator<string>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        variant: PropTypes.Requireable<string>;
        color: PropTypes.Requireable<string>;
        classes: PropTypes.Requireable<string>;
    };
    defaultProps: {
        backgroundColor: any;
        size: string;
        variant: string;
        onClick: any;
        color: string;
        isDisabled: boolean;
        classes: string;
    };
};
/**
 * Primary UI component for user interaction
 */
//  icon pass like this
// import home from '../../assets/image/home.png'
// defaultInputIcon = ((<img width="20" height="20" src={home} />))
declare const NCInput: {
    (props: any): JSX.Element;
    propTypes: {
        variant: PropTypes.Requireable<string>;
        type: PropTypes.Requireable<string>;
        disable: PropTypes.Requireable<boolean>;
        rounded: PropTypes.Requireable<boolean>;
        iconSrc: PropTypes.Requireable<boolean>;
        iconPath: PropTypes.Requireable<string>;
        size: PropTypes.Requireable<string>;
        color: PropTypes.Requireable<string>;
        inputColor: PropTypes.Requireable<string>;
        error: PropTypes.Requireable<boolean>;
        width: PropTypes.Requireable<number>;
        placeholder: PropTypes.Requireable<string>;
        widthpxStyle: PropTypes.Requireable<number>;
        style: PropTypes.Requireable<object>;
        label: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<string>;
    };
    defaultProps: {
        rounded: boolean;
        placeholder: string;
        widthpxStyle: number;
        disable: boolean;
        iconSrc: boolean;
        iconPath: string;
        color: string;
        isMaterial: boolean;
        label: string;
        variant: string;
        type: string;
        error: boolean;
        size: string;
        width: number;
        value: string;
        inputColor: string;
    };
};
// This Component is the same implementation of NCButton but without using the material UI library
declare const NCInputWithoutMUI: {
    (props: any): JSX.Element;
    propTypes: {
        variant: PropTypes.Requireable<string>;
        size: PropTypes.Requireable<string>;
        width: PropTypes.Requireable<string>;
        placeholder: PropTypes.Requireable<string>;
        type: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        error: PropTypes.Requireable<boolean>;
        leftComponent: PropTypes.Requireable<PropTypes.ReactElementLike>;
        rightComponent: PropTypes.Requireable<PropTypes.ReactElementLike>;
        color: PropTypes.Requireable<string>;
    };
    defaultProps: {
        variant: string;
        size: string;
        width: string;
        placeholder: string;
        disabled: boolean;
        error: boolean;
    };
};
declare const NCTable: (props: any) => JSX.Element;
type GRID_OPTIONAL_PROPS = {
    children?: React.ReactNode;
    /**
     * Table wrapper height
     */
    height?: number | string;
    /**
     * Table wrapper width
     */
    width?: number | string;
    /**
     * The height in pixels for the row containing the column label header. If not specified, it uses the theme value of header-height.
     */
    headerHeight?: number;
    /**
     * The height, in pixels, of this row
     */
    rowHeight?: number;
    /**
     * Get Dynamic data for the row , but it should have property row height
     */
    getRowHeight?: () => number;
    /**
     * Type of Row Selection
     */
    rowSelection?: "single" | "multiple";
    /**
     * If true, row selection won't happen when rows are clicked. Use when you only want checkbox selection.
     */
    suppressRowClickSelection?: boolean;
    /**
     * If true, cells won't be focusable. This means keyboard navigation will be disabled for grid cells,
     * but remain enabled in other elements of the grid such as column headers, floating filters, tool panels.
     */
    suppressCellFocus?: boolean;
    /**
     * Row selection is changed. Use the grid API getSelectedNodes() to get the new list of selected nodes.
     */
    onSelectionChanged?: () => void;
    /**
     * The grid has initialised. Use this event if, for example, you need to use the grid's API to fix the columns to size.
     */
    onGridReady?: () => void;
    /**
     * Row is selected or deselected. The event contains the node in question,
     * so call the node's isSelected() method to see if it was just selected or deselected.
     */
    onRowSelected?: () => void;
    /**
     * Value has changed after editing. This event will not fire if editing was cancelled (eg ESC was pressed).
     */
    onCellValueChanged?: () => void;
};
/**
 * NCDataGrid has only those propse which are required in feature
 * It doesn't have all props spread to the component to avoid console errors at render type like
 * React does not recognize the `SOME` prop on a DOM element.
 */
declare const NCDataGrid: React.ForwardRefExoticComponent<{
    columnDefs: object[];
    rowData: object[];
    defaultColDef: object;
} & Partial<GRID_OPTIONAL_PROPS> & React.RefAttributes<AgGridReact>>;
/**
 * Primary UI component for user interaction
 */
declare const NCVerification: {
    (props: any): JSX.Element;
    propTypes: {
        variant: PropTypes.Requireable<string>;
        imagePath: PropTypes.Requireable<string>;
        showModel: PropTypes.Requireable<boolean>;
        buttonText: PropTypes.Requireable<string>;
        message: PropTypes.Requireable<string>;
        data: PropTypes.Requireable<any[]>;
        onClickHandler: PropTypes.Requireable<(...args: any[]) => any>;
    };
    defaultProps: {
        showModel: boolean;
        variant: string;
        imagePath: any;
        message: string;
        buttonText: string;
    };
};
declare const NCBulkUpload: {
    (props: any): JSX.Element;
    propTypes: {
        fileType: PropTypes.Requireable<string>;
        onResponse: PropTypes.Requireable<(...args: any[]) => any>;
        onCancel: PropTypes.Requireable<(...args: any[]) => any>;
        showModel: PropTypes.Requireable<boolean>;
        dropMessage: PropTypes.Requireable<string>;
        cancelTitle: PropTypes.Requireable<string>;
        uploadTitle: PropTypes.Requireable<string>;
        chooseFileMessage: PropTypes.Requireable<string>;
    };
    defaultProps: {
        onResponse: () => void;
        onCancel: () => void;
        showModel: boolean;
        dropMessage: string;
        chooseFileMessage: string;
        cancelTitle: string;
        uploadTitle: string;
        fileType: string;
    };
};
declare const EditableCell: ({ value: initialValue, row: { index }, column: { id }, updateData, styles }: {
    value: any;
    row: {
        index: any;
    };
    column: {
        id: any;
    };
    updateData: any;
    styles: any;
}) => JSX.Element;
/**
 * Primary UI component for user interaction
 */
declare const NCLoader: {
    (props: any): JSX.Element;
    propTypes: {
        color: PropTypes.Requireable<string>;
        logoColor: PropTypes.Requireable<string>;
        labelMargin: PropTypes.Requireable<string>;
        fontWeight: PropTypes.Requireable<boolean>;
        borderWidth: PropTypes.Requireable<string>;
        loaderContentBgColor: PropTypes.Requireable<string>;
        labelColor: PropTypes.Requireable<string>;
        size: PropTypes.Requireable<string>;
        label: PropTypes.Requireable<string>;
        classes: PropTypes.Requireable<string>;
        isStoryBookRender: PropTypes.Requireable<boolean>;
        fontSize: PropTypes.Requireable<string>;
    };
    defaultProps: {
        size: string;
        variant: string;
        color: string;
        classes: string;
        loaderContentBgColor: string;
        isStoryBookRender: boolean;
        variantType: string;
        logoColor: string;
        borderWidth: string;
        labelMargin: string;
        fontWeight: boolean;
        fontSize: string;
    };
};
declare const NCModal: {
    (props: any): JSX.Element;
    propTypes: {
        title: PropTypes.Requireable<string>;
        description: PropTypes.Requireable<string>;
        buttons: PropTypes.Requireable<any[]>;
        showModal: PropTypes.Requireable<boolean>;
    };
};
declare const NCIconWithDropDown: {
    (props: any): JSX.Element;
    propTypes: {
        title: PropTypes.Requireable<string>;
        placeholder: PropTypes.Requireable<string>;
        items: PropTypes.Requireable<any[]>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
    };
    defaultProps: {
        title: string;
        iconPosition: string;
        classname: string;
        items: {
            name: string;
            icon: string;
        }[];
        menuItemClass: string;
    };
};
export { NCButton, NCButtonWithoutMUI, NCText, NCChip, NCInput, NCInputWithoutMUI, NCTable as Table, NCDataGrid, NCVerification, NCBulkUpload, EditableCell, NCLoader, NCModal, NCIconWithDropDown };
